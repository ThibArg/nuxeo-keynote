<div xmlns:nxd="http://nuxeo.org/nxweb/document">

<style>
.knpdf_button {
	height: 24px;
	padding-left: 8px;
	padding-right: 8px;
	margin-left: : 5px;
	font-size: smaller;
}
</style>

<div>
	<div class="buttonsGadget" style="margin-left:0px; display:inline-block">
		<button id="knpdf_first" class="knpdf_button">First</button>
		<button id="knpdf_prev" class="knpdf_button">Previous</button>
		<button id="knpdf_next" class="knpdf_button">Next</button>
		<button id="knpdf_last" class="knpdf_button">Last</button>
	</div>
	<span style="margin-left:20px">Page: <span id="page_num"></span>/<span id="knpdf_page_count"></span></span>
 </div>

<div>
	<canvas id="the-canvas" style="border:1px  solid black; width:90%; height:90%"></canvas>
</div>

<script src="http://mozilla.github.io/pdf.js/build/pdf.js"></script>
<script>
/*<![CDATA[*/

// Setup the worker
PDFJS.workerSrc = "http://mozilla.github.io/pdf.js/build/pdf.worker.js";

//var url = "http://localhost:8080/nuxeo/nxfile/default/094f5cb2-99cc-46a3-970d-7a30507c0d67/knpdf:content/Nuxeo-DM.key.zip.pdf";

// ctx.currentDocument is a stuff coming from nuxeo
var url = "http://localhost:8080/nuxeo/nxfile/default/" + ctx.currentDocument + "/knpdf:content/";//Nuxeo-DM.key.zip.pdf";

//PDFJS.disableWorker = true;
//debugger;

var pdfDoc = null,
	pageNum = 1,
	pageRendering = false,
	pageNumPending = null,
	countOfPages = 0,
	scale = 0.8,
	canvas = document.getElementById('the-canvas'),
	ctx = canvas.getContext('2d');

var bFirst = null,
	bPrev,
	bNext,
	bLast;

function renderPage(num) {
	pageRendering = true;
	// Using promise to fetch the page
	pdfDoc.getPage(num).then(function(page) {
		var viewport = page.getViewport(scale);
		canvas.height = viewport.height;
		canvas.width = viewport.width;

		// Render PDF page into canvas context
		var renderContext = {
			canvasContext: ctx,
			viewport: viewport
		};
		var renderTask = page.render(renderContext);

		// Wait for rendering to finish
		renderTask.promise.then(function() {
			pageRendering = false;
			if (pageNumPending !== null) {
				// New page rendering is pending
				renderPage(pageNumPending);
				pageNumPending = null;
			}
			updateUI();
		});
	});

	// Update page counters
	document.getElementById('page_num').textContent = pageNum;
}


function queueRenderPage(num) {
	if (pageRendering) {
		pageNumPending = num;
		updateUI();
	} else {
		renderPage(num);
	}
}

function updateUI() {
	if(bFirst == null) {
		bFirst = jQuery("#knpdf_first");
		bPrev = jQuery("#knpdf_prev");
		bNext = jQuery("#knpdf_next");
		bLast = jQuery("#knpdf_last");
	}

	bFirst.attr("disabled", pageNum < 2);
	bPrev.attr("disabled", pageNum < 2);
	bNext.attr("disabled", pageNum >= countOfPages);
	bLast.attr("disabled", pageNum >= countOfPages);

}


function onFirstPage() {
	pageNum = 1;
	queueRenderPage(1);
}
document.getElementById('knpdf_first').addEventListener('click', onFirstPage);


function onPrevPage() {
	if (pageNum <= 1) {
		return;
	}
	pageNum--;
	queueRenderPage(pageNum);
}
document.getElementById('knpdf_prev').addEventListener('click', onPrevPage);


function onNextPage() {
	if (pageNum >= pdfDoc.numPages) {
		return;
	}
	pageNum++;
	queueRenderPage(pageNum);
}
document.getElementById('knpdf_next').addEventListener('click', onNextPage);


function onLastPage() {
	pageNum = countOfPages;
	queueRenderPage(pageNum);
}
document.getElementById('knpdf_last').addEventListener('click', onLastPage);


PDFJS.getDocument(url).then(function(pdfDoc_) {
	pdfDoc = pdfDoc_;
	countOfPages = pdfDoc.numPages;
	document.getElementById('knpdf_page_count').textContent = countOfPages;

	// Initial/first page rendering
	renderPage(pageNum);
});


jQuery(document).ready(function() {
	// . . .
});
/*]]>*/
</script>
</div>